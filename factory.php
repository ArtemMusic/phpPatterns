<?php

//Суть factory - один класс создает другой

class Worker
{
    private string $name;

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param string $name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }
}

class WorkerFactory
{
    public static function make(): Worker
    {
        return new Worker();
    }
}

$worker = WorkerFactory::make();
$worker->setName('artem');
print_r($worker->getName());

//Данный код реализует паттерн "Фабрика" (Factory). Суть паттерна заключается в том, что есть один класс (фабрика), который создает объекты другого класса (продукт) и возвращает их в зависимости от переданных параметров.
//
//В данном конкретном случае есть класс Worker, который представляет собой "продукт". Есть также класс WorkerFactory, который является "фабрикой" и содержит метод make(), который создает и возвращает новый объект класса Worker.
//
//Когда мы вызываем WorkerFactory::make(), мы получаем новый объект класса Worker. Затем мы устанавливаем его имя в "artem" и выводим его на экран.
//
//В результате выполнения кода мы увидим на экране строку "artem", что означает, что объект класса Worker был успешно создан и его свойство name установлено в "artem".



//Плюсы паттерна "Фабрика" (Factory):

//Упрощение кода, так как все создание объектов вынесено в отдельный класс, что позволяет избежать повторения кода в разных частях приложения;
//Упрощение тестирования, так как фабрика может быть заменена мок-объектом или заглушкой при тестировании.
//Минусы паттерна "Фабрика" (Factory):
//
//Усложнение архитектуры приложения из-за необходимости создания дополнительных классов;
//Иногда фабрики могут создавать сложные объекты, что может приводить к ухудшению производительности приложения;
//Увеличение кода приложения, если объекты создаются с использованием большого количества различных параметров.
//Паттерн "Фабрика" широко используется в объектно-ориентированном программировании и может быть полезен в следующих случаях:
//
//Когда создание объектов необходимо скрыть или абстрагировать от клиента приложения;
//Когда приложению необходимо создавать множество объектов одного типа;
//Когда объекты, которые необходимо создать, сложные и могут быть созданы несколькими способами (например, в зависимости от параметров или контекста);
//Когда приложению необходимо дополнительно обрабатывать созданные объекты (например, регистрировать их или подключать к другим объектам).